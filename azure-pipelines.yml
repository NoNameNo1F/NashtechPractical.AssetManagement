name: $(Build.SourceBranchName)-CD-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - 'NashtechPractical.AssetManagement.Application/*'
    - 'NashtechPractical.AssetManagement.Core/*'
    - 'NashtechPractical.AssetManagement.Infrastructure/*'
    - 'NashtechPractical.AssetManagement.Shared/*'
    - 'NashtechPractical.AssetManagement.WebAPI/*'
    - 'NashtechPractical.AssetManagement.WebAPI/Dockerfile'
    - 'azure-pipelines-cd.yml'

pool:
  name: Test

variables:
  group: BackendSecrets
  solution: '**/*.sln'
  tag: '$(Build.BuildId)'
  buildConfiguration: 'Release'
  dotnetSdkVersion: '9.x'
  webApiProjectName: 'NashtechPractical.AssetManagement.WebAPI/NashtechPractical.AssetManagement.WebAPI.csproj'

  # EF Migrations Variables
  efMigrationsProject: 'NashtechPractical.AssetManagement.Infrastructure/NashtechPractical.AssetManagement.Infrastructure.csproj'
  efStartupProject: 'NashtechPractical.AssetManagement.WebAPI/NashtechPractical.AssetManagement.WebAPI.csproj'

stages:
- stage: Build_And_Package
  displayName: 'Build, Package & Migrate DB'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: BuildPackageAndMigrate
    displayName: 'Build .NET App, Package & Run DB Migrations'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(dotnetSdkVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # Step 1: Publish the Web Application
    - task: DotNetCoreCLI@2
      displayName: 'Publish WebAPI for Deployment'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(webApiProjectName)'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --no-build'
        zipAfterPublish: true

    # Step 2: Publish the zipped application as a pipeline artifact
    - task: PublishPipelineArtifact@1
      displayName: 'Publish WebApp Artifact (AppPackage.zip)'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'WebAppPackage'

  #Download artifact


- stage: Deploy_To_AppService
  displayName: 'Deploy to App Service'
  dependsOn: Build_And_Package
  condition: succeeded()
  jobs:
  - job: DeployWebAppToAAS
    displayName: 'Deploy Web App to Azure App Service'
    # environment: $(APP_SERVICE_NAME)
    # pool:
    #   name: Test
    steps:
    # Step 1: Download the WebAppPackage artifact
    - task: DownloadPipelineArtifact@2
      displayName: 'Download WebAppPackage Artifact'
      inputs:
        buildType: 'current'
        artifactName: 'WebAppPackage'
        targetPath: '$(Pipeline.Workspace)/WebAppPackage'

    # Step 2: Deploy to Azure App Service
    - task: AzureWebApp@1
      displayName: 'Deploy to Azure App Service'
      inputs:
        azureSubscription: 'test-service-connect' #$(APP_SERVICE_CONNECTION)
        appType: 'webApp'
        appName: $(APP_SERVICE_NAME)
        package: '$(Pipeline.Workspace)/WebAppPackage/**/*.zip'
